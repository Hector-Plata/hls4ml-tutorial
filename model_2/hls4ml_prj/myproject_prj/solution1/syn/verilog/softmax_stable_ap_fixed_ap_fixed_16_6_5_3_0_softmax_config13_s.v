// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [16:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire   [9:0] y_V_fu_538_p3;
reg   [9:0] y_V_reg_1088;
wire   [9:0] y_V_1_fu_572_p3;
reg   [9:0] y_V_1_reg_1093;
wire   [9:0] y_V_2_fu_606_p3;
reg   [9:0] y_V_2_reg_1098;
wire   [9:0] y_V_3_fu_640_p3;
reg   [9:0] y_V_3_reg_1103;
wire   [9:0] y_V_4_fu_674_p3;
reg   [9:0] y_V_4_reg_1108;
reg   [9:0] y_V_4_reg_1108_pp0_iter1_reg;
reg   [16:0] exp_res_0_V_reg_1133;
reg   [16:0] exp_res_0_V_reg_1133_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_reg_1138;
reg   [16:0] exp_res_1_V_reg_1138_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_reg_1143;
reg   [16:0] exp_res_2_V_reg_1143_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_reg_1148;
reg   [16:0] exp_res_3_V_reg_1148_pp0_iter3_reg;
wire  signed [17:0] p_Val2_16_fu_844_p3;
reg  signed [17:0] p_Val2_16_reg_1158;
reg   [16:0] exp_res_4_V_reg_1164;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_682_p1;
wire   [63:0] zext_ln255_1_fu_686_p1;
wire   [63:0] zext_ln255_2_fu_690_p1;
wire   [63:0] zext_ln255_3_fu_694_p1;
wire   [63:0] zext_ln255_4_fu_698_p1;
wire   [63:0] zext_ln265_fu_954_p1;
wire  signed [15:0] icmp_ln1496_fu_172_p0;
wire  signed [15:0] icmp_ln1496_fu_172_p1;
wire   [0:0] icmp_ln1496_fu_172_p2;
wire  signed [15:0] select_ln65_fu_178_p1;
wire  signed [15:0] select_ln65_fu_178_p2;
wire  signed [15:0] icmp_ln1496_1_fu_186_p0;
wire  signed [15:0] icmp_ln1496_1_fu_186_p1;
wire   [0:0] icmp_ln1496_1_fu_186_p2;
wire  signed [15:0] select_ln65_1_fu_192_p1;
wire  signed [15:0] select_ln65_1_fu_192_p2;
wire   [15:0] select_ln65_fu_178_p3;
wire   [15:0] select_ln65_1_fu_192_p3;
wire   [0:0] icmp_ln1496_2_fu_200_p2;
wire   [15:0] select_ln65_2_fu_206_p3;
wire  signed [15:0] icmp_ln1496_3_fu_214_p1;
wire   [0:0] icmp_ln1496_3_fu_214_p2;
wire  signed [15:0] x_max_V_fu_220_p1;
wire  signed [15:0] sext_ln703_fu_228_p0;
wire   [15:0] x_max_V_fu_220_p3;
wire  signed [16:0] sext_ln703_fu_228_p1;
wire  signed [16:0] sext_ln703_1_fu_232_p1;
wire   [16:0] sub_ln1193_fu_236_p2;
wire   [0:0] tmp_3_fu_250_p3;
wire   [0:0] tmp_1_fu_242_p3;
wire   [0:0] xor_ln786_fu_258_p2;
wire   [0:0] xor_ln340_fu_276_p2;
wire  signed [15:0] sext_ln703_2_fu_288_p0;
wire  signed [16:0] sext_ln703_2_fu_288_p1;
wire   [16:0] sub_ln1193_1_fu_292_p2;
wire   [0:0] tmp_7_fu_306_p3;
wire   [0:0] tmp_5_fu_298_p3;
wire   [0:0] xor_ln786_1_fu_314_p2;
wire   [0:0] xor_ln340_1_fu_332_p2;
wire  signed [15:0] sext_ln703_3_fu_344_p0;
wire  signed [16:0] sext_ln703_3_fu_344_p1;
wire   [16:0] sub_ln1193_2_fu_348_p2;
wire   [0:0] tmp_10_fu_362_p3;
wire   [0:0] tmp_9_fu_354_p3;
wire   [0:0] xor_ln786_2_fu_370_p2;
wire   [0:0] xor_ln340_2_fu_388_p2;
wire  signed [15:0] sext_ln703_4_fu_400_p0;
wire  signed [16:0] sext_ln703_4_fu_400_p1;
wire   [16:0] sub_ln1193_3_fu_404_p2;
wire   [0:0] tmp_12_fu_418_p3;
wire   [0:0] tmp_11_fu_410_p3;
wire   [0:0] xor_ln786_3_fu_426_p2;
wire   [0:0] xor_ln340_3_fu_444_p2;
wire  signed [15:0] sext_ln703_5_fu_456_p0;
wire  signed [16:0] sext_ln703_5_fu_456_p1;
wire   [16:0] sub_ln1193_4_fu_460_p2;
wire   [0:0] tmp_14_fu_474_p3;
wire   [0:0] tmp_13_fu_466_p3;
wire   [0:0] xor_ln786_4_fu_482_p2;
wire   [0:0] xor_ln340_4_fu_500_p2;
wire   [0:0] xor_ln340_5_fu_270_p2;
wire   [9:0] tmp_fu_512_p4;
wire   [0:0] and_ln786_fu_264_p2;
wire   [0:0] or_ln340_fu_282_p2;
wire   [9:0] select_ln340_fu_522_p3;
wire   [9:0] select_ln388_fu_530_p3;
wire   [0:0] xor_ln340_6_fu_326_p2;
wire   [9:0] tmp_2_fu_546_p4;
wire   [0:0] and_ln786_1_fu_320_p2;
wire   [0:0] or_ln340_1_fu_338_p2;
wire   [9:0] select_ln340_2_fu_556_p3;
wire   [9:0] select_ln388_1_fu_564_p3;
wire   [0:0] xor_ln340_7_fu_382_p2;
wire   [9:0] tmp_4_fu_580_p4;
wire   [0:0] and_ln786_2_fu_376_p2;
wire   [0:0] or_ln340_2_fu_394_p2;
wire   [9:0] select_ln340_4_fu_590_p3;
wire   [9:0] select_ln388_2_fu_598_p3;
wire   [0:0] xor_ln340_8_fu_438_p2;
wire   [9:0] tmp_6_fu_614_p4;
wire   [0:0] and_ln786_3_fu_432_p2;
wire   [0:0] or_ln340_3_fu_450_p2;
wire   [9:0] select_ln340_6_fu_624_p3;
wire   [9:0] select_ln388_3_fu_632_p3;
wire   [0:0] xor_ln340_9_fu_494_p2;
wire   [9:0] tmp_8_fu_648_p4;
wire   [0:0] and_ln786_4_fu_488_p2;
wire   [0:0] or_ln340_4_fu_506_p2;
wire   [9:0] select_ln340_8_fu_658_p3;
wire   [9:0] select_ln388_4_fu_666_p3;
wire   [17:0] p_Val2_6_fu_702_p1;
wire   [17:0] p_Val2_7_fu_706_p1;
wire   [17:0] p_Val2_8_fu_710_p2;
wire   [0:0] p_Result_s_fu_716_p3;
wire   [17:0] p_Val2_9_fu_732_p1;
wire   [17:0] p_Val2_10_fu_736_p1;
wire   [17:0] p_Val2_11_fu_740_p2;
wire   [0:0] p_Result_14_fu_746_p3;
wire  signed [17:0] p_Val2_12_fu_724_p3;
wire  signed [17:0] p_Val2_13_fu_754_p3;
wire  signed [18:0] rhs_V_fu_766_p1;
wire  signed [18:0] lhs_V_fu_762_p1;
wire   [18:0] ret_V_fu_770_p2;
wire   [17:0] p_Val2_15_fu_784_p2;
wire   [0:0] p_Result_16_fu_790_p3;
wire   [0:0] p_Result_15_fu_776_p3;
wire   [0:0] xor_ln786_5_fu_798_p2;
wire   [0:0] xor_ln340_11_fu_816_p2;
wire   [0:0] xor_ln340_10_fu_810_p2;
wire   [0:0] underflow_fu_804_p2;
wire   [0:0] or_ln340_5_fu_822_p2;
wire   [17:0] select_ln340_12_fu_828_p3;
wire   [17:0] select_ln388_5_fu_836_p3;
wire  signed [18:0] lhs_V_1_fu_856_p1;
wire   [18:0] rhs_V_1_fu_859_p1;
wire   [18:0] ret_V_1_fu_863_p2;
wire   [17:0] p_Val2_17_fu_852_p1;
wire   [17:0] p_Val2_19_fu_877_p2;
wire   [0:0] p_Result_18_fu_882_p3;
wire   [0:0] p_Result_17_fu_869_p3;
wire   [0:0] xor_ln786_6_fu_890_p2;
wire   [0:0] xor_ln340_13_fu_908_p2;
wire   [0:0] xor_ln340_12_fu_902_p2;
wire   [9:0] tmp_s_fu_920_p4;
wire   [0:0] underflow_1_fu_896_p2;
wire   [0:0] or_ln340_6_fu_914_p2;
wire   [9:0] select_ln340_14_fu_930_p3;
wire   [9:0] select_ln388_6_fu_938_p3;
wire   [9:0] y_V_5_fu_946_p3;
wire  signed [25:0] mul_ln1118_fu_1053_p2;
wire  signed [25:0] mul_ln1118_1_fu_1060_p2;
wire  signed [25:0] mul_ln1118_2_fu_1067_p2;
wire  signed [25:0] mul_ln1118_3_fu_1074_p2;
wire  signed [25:0] mul_ln1118_4_fu_1081_p2;
wire  signed [17:0] mul_ln1118_fu_1053_p0;
wire  signed [25:0] sext_ln1116_fu_959_p1;
wire   [16:0] mul_ln1118_fu_1053_p1;
wire  signed [17:0] mul_ln1118_1_fu_1060_p0;
wire   [16:0] mul_ln1118_1_fu_1060_p1;
wire  signed [17:0] mul_ln1118_2_fu_1067_p0;
wire   [16:0] mul_ln1118_2_fu_1067_p1;
wire  signed [17:0] mul_ln1118_3_fu_1074_p0;
wire   [16:0] mul_ln1118_3_fu_1074_p1;
wire  signed [17:0] mul_ln1118_4_fu_1081_p0;
wire   [16:0] mul_ln1118_4_fu_1081_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln1118_1_fu_1060_p10;
wire   [25:0] mul_ln1118_2_fu_1067_p10;
wire   [25:0] mul_ln1118_3_fu_1074_p10;
wire   [25:0] mul_ln1118_4_fu_1081_p10;
wire   [25:0] mul_ln1118_fu_1053_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U218(
    .din0(mul_ln1118_fu_1053_p0),
    .din1(mul_ln1118_fu_1053_p1),
    .dout(mul_ln1118_fu_1053_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U219(
    .din0(mul_ln1118_1_fu_1060_p0),
    .din1(mul_ln1118_1_fu_1060_p1),
    .dout(mul_ln1118_1_fu_1060_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U220(
    .din0(mul_ln1118_2_fu_1067_p0),
    .din1(mul_ln1118_2_fu_1067_p1),
    .dout(mul_ln1118_2_fu_1067_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U221(
    .din0(mul_ln1118_3_fu_1074_p0),
    .din1(mul_ln1118_3_fu_1074_p1),
    .dout(mul_ln1118_3_fu_1074_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U222(
    .din0(mul_ln1118_4_fu_1081_p0),
    .din1(mul_ln1118_4_fu_1081_p1),
    .dout(mul_ln1118_4_fu_1081_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_1133 <= exp_table1_q0;
        exp_res_1_V_reg_1138 <= exp_table1_q1;
        exp_res_2_V_reg_1143 <= exp_table1_q2;
        exp_res_3_V_reg_1148 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_reg_1133_pp0_iter3_reg <= exp_res_0_V_reg_1133;
        exp_res_1_V_reg_1138_pp0_iter3_reg <= exp_res_1_V_reg_1138;
        exp_res_2_V_reg_1143_pp0_iter3_reg <= exp_res_2_V_reg_1143;
        exp_res_3_V_reg_1148_pp0_iter3_reg <= exp_res_3_V_reg_1148;
        p_Val2_16_reg_1158 <= p_Val2_16_fu_844_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exp_res_4_V_reg_1164 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_V_1_reg_1093 <= y_V_1_fu_572_p3;
        y_V_2_reg_1098 <= y_V_2_fu_606_p3;
        y_V_3_reg_1103 <= y_V_3_fu_640_p3;
        y_V_4_reg_1108 <= y_V_4_fu_674_p3;
        y_V_4_reg_1108_pp0_iter1_reg <= y_V_4_reg_1108;
        y_V_reg_1088 <= y_V_fu_538_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_1_fu_320_p2 = (xor_ln786_1_fu_314_p2 & tmp_5_fu_298_p3);

assign and_ln786_2_fu_376_p2 = (xor_ln786_2_fu_370_p2 & tmp_9_fu_354_p3);

assign and_ln786_3_fu_432_p2 = (xor_ln786_3_fu_426_p2 & tmp_11_fu_410_p3);

assign and_ln786_4_fu_488_p2 = (xor_ln786_4_fu_482_p2 & tmp_13_fu_466_p3);

assign and_ln786_fu_264_p2 = (xor_ln786_fu_258_p2 & tmp_1_fu_242_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1118_fu_1053_p2[25:10]}};

assign ap_return_1 = {{mul_ln1118_1_fu_1060_p2[25:10]}};

assign ap_return_2 = {{mul_ln1118_2_fu_1067_p2[25:10]}};

assign ap_return_3 = {{mul_ln1118_3_fu_1074_p2[25:10]}};

assign ap_return_4 = {{mul_ln1118_4_fu_1081_p2[25:10]}};

assign exp_table1_address0 = zext_ln255_fu_682_p1;

assign exp_table1_address1 = zext_ln255_1_fu_686_p1;

assign exp_table1_address2 = zext_ln255_2_fu_690_p1;

assign exp_table1_address3 = zext_ln255_3_fu_694_p1;

assign exp_table1_address4 = zext_ln255_4_fu_698_p1;

assign icmp_ln1496_1_fu_186_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_186_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_186_p2 = (($signed(icmp_ln1496_1_fu_186_p0) < $signed(icmp_ln1496_1_fu_186_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_200_p2 = (($signed(select_ln65_fu_178_p3) < $signed(select_ln65_1_fu_192_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_214_p1 = data_4_V_read;

assign icmp_ln1496_3_fu_214_p2 = (($signed(select_ln65_2_fu_206_p3) < $signed(icmp_ln1496_3_fu_214_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_172_p0 = data_0_V_read;

assign icmp_ln1496_fu_172_p1 = data_1_V_read;

assign icmp_ln1496_fu_172_p2 = (($signed(icmp_ln1496_fu_172_p0) < $signed(icmp_ln1496_fu_172_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_954_p1;

assign lhs_V_1_fu_856_p1 = p_Val2_16_reg_1158;

assign lhs_V_fu_762_p1 = p_Val2_12_fu_724_p3;

assign mul_ln1118_1_fu_1060_p0 = sext_ln1116_fu_959_p1;

assign mul_ln1118_1_fu_1060_p1 = mul_ln1118_1_fu_1060_p10;

assign mul_ln1118_1_fu_1060_p10 = exp_res_1_V_reg_1138_pp0_iter3_reg;

assign mul_ln1118_2_fu_1067_p0 = sext_ln1116_fu_959_p1;

assign mul_ln1118_2_fu_1067_p1 = mul_ln1118_2_fu_1067_p10;

assign mul_ln1118_2_fu_1067_p10 = exp_res_2_V_reg_1143_pp0_iter3_reg;

assign mul_ln1118_3_fu_1074_p0 = sext_ln1116_fu_959_p1;

assign mul_ln1118_3_fu_1074_p1 = mul_ln1118_3_fu_1074_p10;

assign mul_ln1118_3_fu_1074_p10 = exp_res_3_V_reg_1148_pp0_iter3_reg;

assign mul_ln1118_4_fu_1081_p0 = sext_ln1116_fu_959_p1;

assign mul_ln1118_4_fu_1081_p1 = mul_ln1118_4_fu_1081_p10;

assign mul_ln1118_4_fu_1081_p10 = exp_res_4_V_reg_1164;

assign mul_ln1118_fu_1053_p0 = sext_ln1116_fu_959_p1;

assign mul_ln1118_fu_1053_p1 = mul_ln1118_fu_1053_p10;

assign mul_ln1118_fu_1053_p10 = exp_res_0_V_reg_1133_pp0_iter3_reg;

assign or_ln340_1_fu_338_p2 = (xor_ln340_1_fu_332_p2 | tmp_7_fu_306_p3);

assign or_ln340_2_fu_394_p2 = (xor_ln340_2_fu_388_p2 | tmp_10_fu_362_p3);

assign or_ln340_3_fu_450_p2 = (xor_ln340_3_fu_444_p2 | tmp_12_fu_418_p3);

assign or_ln340_4_fu_506_p2 = (xor_ln340_4_fu_500_p2 | tmp_14_fu_474_p3);

assign or_ln340_5_fu_822_p2 = (xor_ln340_11_fu_816_p2 | p_Result_16_fu_790_p3);

assign or_ln340_6_fu_914_p2 = (xor_ln340_13_fu_908_p2 | p_Result_18_fu_882_p3);

assign or_ln340_fu_282_p2 = (xor_ln340_fu_276_p2 | tmp_3_fu_250_p3);

assign p_Result_14_fu_746_p3 = p_Val2_11_fu_740_p2[32'd17];

assign p_Result_15_fu_776_p3 = ret_V_fu_770_p2[32'd18];

assign p_Result_16_fu_790_p3 = p_Val2_15_fu_784_p2[32'd17];

assign p_Result_17_fu_869_p3 = ret_V_1_fu_863_p2[32'd18];

assign p_Result_18_fu_882_p3 = p_Val2_19_fu_877_p2[32'd17];

assign p_Result_s_fu_716_p3 = p_Val2_8_fu_710_p2[32'd17];

assign p_Val2_10_fu_736_p1 = exp_table1_q3;

assign p_Val2_11_fu_740_p2 = (p_Val2_9_fu_732_p1 + p_Val2_10_fu_736_p1);

assign p_Val2_12_fu_724_p3 = ((p_Result_s_fu_716_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_8_fu_710_p2);

assign p_Val2_13_fu_754_p3 = ((p_Result_14_fu_746_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_11_fu_740_p2);

assign p_Val2_15_fu_784_p2 = ($signed(p_Val2_12_fu_724_p3) + $signed(p_Val2_13_fu_754_p3));

assign p_Val2_16_fu_844_p3 = ((or_ln340_5_fu_822_p2[0:0] === 1'b1) ? select_ln340_12_fu_828_p3 : select_ln388_5_fu_836_p3);

assign p_Val2_17_fu_852_p1 = exp_table1_q4;

assign p_Val2_19_fu_877_p2 = ($signed(p_Val2_17_fu_852_p1) + $signed(p_Val2_16_reg_1158));

assign p_Val2_6_fu_702_p1 = exp_table1_q0;

assign p_Val2_7_fu_706_p1 = exp_table1_q1;

assign p_Val2_8_fu_710_p2 = (p_Val2_6_fu_702_p1 + p_Val2_7_fu_706_p1);

assign p_Val2_9_fu_732_p1 = exp_table1_q2;

assign ret_V_1_fu_863_p2 = ($signed(lhs_V_1_fu_856_p1) + $signed(rhs_V_1_fu_859_p1));

assign ret_V_fu_770_p2 = ($signed(rhs_V_fu_766_p1) + $signed(lhs_V_fu_762_p1));

assign rhs_V_1_fu_859_p1 = exp_table1_q4;

assign rhs_V_fu_766_p1 = p_Val2_13_fu_754_p3;

assign select_ln340_12_fu_828_p3 = ((xor_ln340_10_fu_810_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_15_fu_784_p2);

assign select_ln340_14_fu_930_p3 = ((xor_ln340_12_fu_902_p2[0:0] === 1'b1) ? 10'd511 : tmp_s_fu_920_p4);

assign select_ln340_2_fu_556_p3 = ((xor_ln340_6_fu_326_p2[0:0] === 1'b1) ? 10'd511 : tmp_2_fu_546_p4);

assign select_ln340_4_fu_590_p3 = ((xor_ln340_7_fu_382_p2[0:0] === 1'b1) ? 10'd511 : tmp_4_fu_580_p4);

assign select_ln340_6_fu_624_p3 = ((xor_ln340_8_fu_438_p2[0:0] === 1'b1) ? 10'd511 : tmp_6_fu_614_p4);

assign select_ln340_8_fu_658_p3 = ((xor_ln340_9_fu_494_p2[0:0] === 1'b1) ? 10'd511 : tmp_8_fu_648_p4);

assign select_ln340_fu_522_p3 = ((xor_ln340_5_fu_270_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_512_p4);

assign select_ln388_1_fu_564_p3 = ((and_ln786_1_fu_320_p2[0:0] === 1'b1) ? 10'd512 : tmp_2_fu_546_p4);

assign select_ln388_2_fu_598_p3 = ((and_ln786_2_fu_376_p2[0:0] === 1'b1) ? 10'd512 : tmp_4_fu_580_p4);

assign select_ln388_3_fu_632_p3 = ((and_ln786_3_fu_432_p2[0:0] === 1'b1) ? 10'd512 : tmp_6_fu_614_p4);

assign select_ln388_4_fu_666_p3 = ((and_ln786_4_fu_488_p2[0:0] === 1'b1) ? 10'd512 : tmp_8_fu_648_p4);

assign select_ln388_5_fu_836_p3 = ((underflow_fu_804_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_15_fu_784_p2);

assign select_ln388_6_fu_938_p3 = ((underflow_1_fu_896_p2[0:0] === 1'b1) ? 10'd512 : tmp_s_fu_920_p4);

assign select_ln388_fu_530_p3 = ((and_ln786_fu_264_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_512_p4);

assign select_ln65_1_fu_192_p1 = data_3_V_read;

assign select_ln65_1_fu_192_p2 = data_2_V_read;

assign select_ln65_1_fu_192_p3 = ((icmp_ln1496_1_fu_186_p2[0:0] === 1'b1) ? select_ln65_1_fu_192_p1 : select_ln65_1_fu_192_p2);

assign select_ln65_2_fu_206_p3 = ((icmp_ln1496_2_fu_200_p2[0:0] === 1'b1) ? select_ln65_1_fu_192_p3 : select_ln65_fu_178_p3);

assign select_ln65_fu_178_p1 = data_1_V_read;

assign select_ln65_fu_178_p2 = data_0_V_read;

assign select_ln65_fu_178_p3 = ((icmp_ln1496_fu_172_p2[0:0] === 1'b1) ? select_ln65_fu_178_p1 : select_ln65_fu_178_p2);

assign sext_ln1116_fu_959_p1 = $signed(invert_table2_q0);

assign sext_ln703_1_fu_232_p1 = $signed(x_max_V_fu_220_p3);

assign sext_ln703_2_fu_288_p0 = data_1_V_read;

assign sext_ln703_2_fu_288_p1 = sext_ln703_2_fu_288_p0;

assign sext_ln703_3_fu_344_p0 = data_2_V_read;

assign sext_ln703_3_fu_344_p1 = sext_ln703_3_fu_344_p0;

assign sext_ln703_4_fu_400_p0 = data_3_V_read;

assign sext_ln703_4_fu_400_p1 = sext_ln703_4_fu_400_p0;

assign sext_ln703_5_fu_456_p0 = data_4_V_read;

assign sext_ln703_5_fu_456_p1 = sext_ln703_5_fu_456_p0;

assign sext_ln703_fu_228_p0 = data_0_V_read;

assign sext_ln703_fu_228_p1 = sext_ln703_fu_228_p0;

assign sub_ln1193_1_fu_292_p2 = ($signed(sext_ln703_2_fu_288_p1) - $signed(sext_ln703_1_fu_232_p1));

assign sub_ln1193_2_fu_348_p2 = ($signed(sext_ln703_3_fu_344_p1) - $signed(sext_ln703_1_fu_232_p1));

assign sub_ln1193_3_fu_404_p2 = ($signed(sext_ln703_4_fu_400_p1) - $signed(sext_ln703_1_fu_232_p1));

assign sub_ln1193_4_fu_460_p2 = ($signed(sext_ln703_5_fu_456_p1) - $signed(sext_ln703_1_fu_232_p1));

assign sub_ln1193_fu_236_p2 = ($signed(sext_ln703_fu_228_p1) - $signed(sext_ln703_1_fu_232_p1));

assign tmp_10_fu_362_p3 = sub_ln1193_2_fu_348_p2[32'd15];

assign tmp_11_fu_410_p3 = sub_ln1193_3_fu_404_p2[32'd16];

assign tmp_12_fu_418_p3 = sub_ln1193_3_fu_404_p2[32'd15];

assign tmp_13_fu_466_p3 = sub_ln1193_4_fu_460_p2[32'd16];

assign tmp_14_fu_474_p3 = sub_ln1193_4_fu_460_p2[32'd15];

assign tmp_1_fu_242_p3 = sub_ln1193_fu_236_p2[32'd16];

assign tmp_2_fu_546_p4 = {{sub_ln1193_1_fu_292_p2[15:6]}};

assign tmp_3_fu_250_p3 = sub_ln1193_fu_236_p2[32'd15];

assign tmp_4_fu_580_p4 = {{sub_ln1193_2_fu_348_p2[15:6]}};

assign tmp_5_fu_298_p3 = sub_ln1193_1_fu_292_p2[32'd16];

assign tmp_6_fu_614_p4 = {{sub_ln1193_3_fu_404_p2[15:6]}};

assign tmp_7_fu_306_p3 = sub_ln1193_1_fu_292_p2[32'd15];

assign tmp_8_fu_648_p4 = {{sub_ln1193_4_fu_460_p2[15:6]}};

assign tmp_9_fu_354_p3 = sub_ln1193_2_fu_348_p2[32'd16];

assign tmp_fu_512_p4 = {{sub_ln1193_fu_236_p2[15:6]}};

assign tmp_s_fu_920_p4 = {{p_Val2_19_fu_877_p2[17:8]}};

assign underflow_1_fu_896_p2 = (xor_ln786_6_fu_890_p2 & p_Result_17_fu_869_p3);

assign underflow_fu_804_p2 = (xor_ln786_5_fu_798_p2 & p_Result_15_fu_776_p3);

assign x_max_V_fu_220_p1 = data_4_V_read;

assign x_max_V_fu_220_p3 = ((icmp_ln1496_3_fu_214_p2[0:0] === 1'b1) ? x_max_V_fu_220_p1 : select_ln65_2_fu_206_p3);

assign xor_ln340_10_fu_810_p2 = (p_Result_16_fu_790_p3 ^ p_Result_15_fu_776_p3);

assign xor_ln340_11_fu_816_p2 = (p_Result_15_fu_776_p3 ^ 1'd1);

assign xor_ln340_12_fu_902_p2 = (p_Result_18_fu_882_p3 ^ p_Result_17_fu_869_p3);

assign xor_ln340_13_fu_908_p2 = (p_Result_17_fu_869_p3 ^ 1'd1);

assign xor_ln340_1_fu_332_p2 = (tmp_5_fu_298_p3 ^ 1'd1);

assign xor_ln340_2_fu_388_p2 = (tmp_9_fu_354_p3 ^ 1'd1);

assign xor_ln340_3_fu_444_p2 = (tmp_11_fu_410_p3 ^ 1'd1);

assign xor_ln340_4_fu_500_p2 = (tmp_13_fu_466_p3 ^ 1'd1);

assign xor_ln340_5_fu_270_p2 = (tmp_3_fu_250_p3 ^ tmp_1_fu_242_p3);

assign xor_ln340_6_fu_326_p2 = (tmp_7_fu_306_p3 ^ tmp_5_fu_298_p3);

assign xor_ln340_7_fu_382_p2 = (tmp_9_fu_354_p3 ^ tmp_10_fu_362_p3);

assign xor_ln340_8_fu_438_p2 = (tmp_12_fu_418_p3 ^ tmp_11_fu_410_p3);

assign xor_ln340_9_fu_494_p2 = (tmp_14_fu_474_p3 ^ tmp_13_fu_466_p3);

assign xor_ln340_fu_276_p2 = (tmp_1_fu_242_p3 ^ 1'd1);

assign xor_ln786_1_fu_314_p2 = (tmp_7_fu_306_p3 ^ 1'd1);

assign xor_ln786_2_fu_370_p2 = (tmp_10_fu_362_p3 ^ 1'd1);

assign xor_ln786_3_fu_426_p2 = (tmp_12_fu_418_p3 ^ 1'd1);

assign xor_ln786_4_fu_482_p2 = (tmp_14_fu_474_p3 ^ 1'd1);

assign xor_ln786_5_fu_798_p2 = (p_Result_16_fu_790_p3 ^ 1'd1);

assign xor_ln786_6_fu_890_p2 = (p_Result_18_fu_882_p3 ^ 1'd1);

assign xor_ln786_fu_258_p2 = (tmp_3_fu_250_p3 ^ 1'd1);

assign y_V_1_fu_572_p3 = ((or_ln340_1_fu_338_p2[0:0] === 1'b1) ? select_ln340_2_fu_556_p3 : select_ln388_1_fu_564_p3);

assign y_V_2_fu_606_p3 = ((or_ln340_2_fu_394_p2[0:0] === 1'b1) ? select_ln340_4_fu_590_p3 : select_ln388_2_fu_598_p3);

assign y_V_3_fu_640_p3 = ((or_ln340_3_fu_450_p2[0:0] === 1'b1) ? select_ln340_6_fu_624_p3 : select_ln388_3_fu_632_p3);

assign y_V_4_fu_674_p3 = ((or_ln340_4_fu_506_p2[0:0] === 1'b1) ? select_ln340_8_fu_658_p3 : select_ln388_4_fu_666_p3);

assign y_V_5_fu_946_p3 = ((or_ln340_6_fu_914_p2[0:0] === 1'b1) ? select_ln340_14_fu_930_p3 : select_ln388_6_fu_938_p3);

assign y_V_fu_538_p3 = ((or_ln340_fu_282_p2[0:0] === 1'b1) ? select_ln340_fu_522_p3 : select_ln388_fu_530_p3);

assign zext_ln255_1_fu_686_p1 = y_V_1_reg_1093;

assign zext_ln255_2_fu_690_p1 = y_V_2_reg_1098;

assign zext_ln255_3_fu_694_p1 = y_V_3_reg_1103;

assign zext_ln255_4_fu_698_p1 = y_V_4_reg_1108_pp0_iter1_reg;

assign zext_ln255_fu_682_p1 = y_V_reg_1088;

assign zext_ln265_fu_954_p1 = y_V_5_fu_946_p3;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_fu_528_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_860 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_562_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_865 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_596_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_870 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_630_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_875 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_664_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_880 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_910 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_915 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_920 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_V_reg_925 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_930 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln255_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_1_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1496_fu_162_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_162_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_168_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_168_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_176_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_176_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_182_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_168_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_182_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_196_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_204_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_210_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_218_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_fu_210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_218_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_222_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_226_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_278_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_2_fu_278_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_282_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_334_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_3_fu_334_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_338_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_4_fu_390_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_4_fu_390_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_3_fu_394_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_400_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_5_fu_446_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_5_fu_446_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_4_fu_450_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_456_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_502_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_512_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_520_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_536_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_546_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_554_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_570_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_580_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_588_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_604_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_3_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_614_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_622_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_9_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_638_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_4_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_648_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_656_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_fu_692_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_692_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_698_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_698_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_2_fu_704_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_698_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_692_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_2_fu_704_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_710_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_5_fu_716_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_825_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_1_fu_832_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_2_fu_839_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_3_fu_846_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_4_fu_853_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_fu_825_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_731_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_1_fu_832_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_839_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_3_fu_846_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_4_fu_853_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_18s_18s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_18s_18s_30_1_1_U234 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => exp_res_0_V_reg_910,
        din1 => mul_ln1118_fu_825_p1,
        dout => mul_ln1118_fu_825_p2);

    myproject_mul_mul_18s_18s_30_1_1_U235 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => exp_res_1_V_reg_915,
        din1 => mul_ln1118_1_fu_832_p1,
        dout => mul_ln1118_1_fu_832_p2);

    myproject_mul_mul_18s_18s_30_1_1_U236 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => exp_res_2_V_reg_920,
        din1 => mul_ln1118_2_fu_839_p1,
        dout => mul_ln1118_2_fu_839_p2);

    myproject_mul_mul_18s_18s_30_1_1_U237 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => exp_res_3_V_reg_925,
        din1 => mul_ln1118_3_fu_846_p1,
        dout => mul_ln1118_3_fu_846_p2);

    myproject_mul_mul_18s_18s_30_1_1_U238 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => exp_res_4_V_reg_930,
        din1 => mul_ln1118_4_fu_853_p1,
        dout => mul_ln1118_4_fu_853_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                exp_res_0_V_reg_910 <= exp_table1_q0;
                exp_res_1_V_reg_915 <= exp_table1_q1;
                exp_res_2_V_reg_920 <= exp_table1_q2;
                exp_res_3_V_reg_925 <= exp_table1_q3;
                exp_res_4_V_reg_930 <= exp_table1_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                y_V_1_reg_865 <= y_V_1_fu_562_p3;
                y_V_2_reg_870 <= y_V_2_fu_596_p3;
                y_V_3_reg_875 <= y_V_3_fu_630_p3;
                y_V_4_reg_880 <= y_V_4_fu_664_p3;
                y_V_reg_860 <= y_V_fu_528_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_698_p0 <= exp_table1_q4;
    add_ln703_1_fu_698_p1 <= exp_table1_q2;
    add_ln703_1_fu_698_p2 <= std_logic_vector(signed(add_ln703_1_fu_698_p0) + signed(add_ln703_1_fu_698_p1));
    add_ln703_2_fu_704_p0 <= exp_table1_q3;
    add_ln703_2_fu_704_p2 <= std_logic_vector(signed(add_ln703_2_fu_704_p0) + signed(add_ln703_1_fu_698_p2));
    add_ln703_fu_692_p0 <= exp_table1_q1;
    add_ln703_fu_692_p1 <= exp_table1_q0;
    add_ln703_fu_692_p2 <= std_logic_vector(signed(add_ln703_fu_692_p0) + signed(add_ln703_fu_692_p1));
    and_ln786_1_fu_310_p2 <= (xor_ln786_1_fu_304_p2 and tmp_4_fu_288_p3);
    and_ln786_2_fu_366_p2 <= (xor_ln786_2_fu_360_p2 and tmp_8_fu_344_p3);
    and_ln786_3_fu_422_p2 <= (xor_ln786_3_fu_416_p2 and tmp_11_fu_400_p3);
    and_ln786_4_fu_478_p2 <= (xor_ln786_4_fu_472_p2 and tmp_13_fu_456_p3);
    and_ln786_fu_254_p2 <= (xor_ln786_fu_248_p2 and tmp_fu_232_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln1118_fu_825_p2(29 downto 14);
    ap_return_1 <= mul_ln1118_1_fu_832_p2(29 downto 14);
    ap_return_2 <= mul_ln1118_2_fu_839_p2(29 downto 14);
    ap_return_3 <= mul_ln1118_3_fu_846_p2(29 downto 14);
    ap_return_4 <= mul_ln1118_4_fu_853_p2(29 downto 14);
    exp_sum_V_fu_710_p2 <= std_logic_vector(unsigned(add_ln703_fu_692_p2) + unsigned(add_ln703_2_fu_704_p2));
    exp_table1_address0 <= zext_ln255_fu_672_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln255_1_fu_676_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln255_2_fu_680_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln255_3_fu_684_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln255_4_fu_688_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_176_p0 <= data_2_V_read;
    icmp_ln1496_1_fu_176_p1 <= data_3_V_read;
    icmp_ln1496_1_fu_176_p2 <= "1" when (signed(icmp_ln1496_1_fu_176_p0) < signed(icmp_ln1496_1_fu_176_p1)) else "0";
    icmp_ln1496_2_fu_190_p2 <= "1" when (signed(select_ln65_fu_168_p3) < signed(select_ln65_1_fu_182_p3)) else "0";
    icmp_ln1496_3_fu_204_p1 <= data_4_V_read;
    icmp_ln1496_3_fu_204_p2 <= "1" when (signed(select_ln65_2_fu_196_p3) < signed(icmp_ln1496_3_fu_204_p1)) else "0";
    icmp_ln1496_fu_162_p0 <= data_0_V_read;
    icmp_ln1496_fu_162_p1 <= data_1_V_read;
    icmp_ln1496_fu_162_p2 <= "1" when (signed(icmp_ln1496_fu_162_p0) < signed(icmp_ln1496_fu_162_p1)) else "0";
    invert_table2_address0 <= zext_ln265_fu_726_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_1_fu_832_p1 <= sext_ln1116_fu_731_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_839_p1 <= sext_ln1116_fu_731_p1(18 - 1 downto 0);
    mul_ln1118_3_fu_846_p1 <= sext_ln1116_fu_731_p1(18 - 1 downto 0);
    mul_ln1118_4_fu_853_p1 <= sext_ln1116_fu_731_p1(18 - 1 downto 0);
    mul_ln1118_fu_825_p1 <= sext_ln1116_fu_731_p1(18 - 1 downto 0);
    or_ln340_1_fu_328_p2 <= (xor_ln340_1_fu_322_p2 or tmp_6_fu_296_p3);
    or_ln340_2_fu_384_p2 <= (xor_ln340_2_fu_378_p2 or tmp_10_fu_352_p3);
    or_ln340_3_fu_440_p2 <= (xor_ln340_3_fu_434_p2 or tmp_12_fu_408_p3);
    or_ln340_4_fu_496_p2 <= (xor_ln340_4_fu_490_p2 or tmp_14_fu_464_p3);
    or_ln340_fu_272_p2 <= (xor_ln340_fu_266_p2 or tmp_2_fu_240_p3);
    select_ln340_2_fu_546_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_316_p2(0) = '1') else 
        tmp_3_fu_536_p4;
    select_ln340_4_fu_580_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_372_p2(0) = '1') else 
        tmp_5_fu_570_p4;
    select_ln340_6_fu_614_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_428_p2(0) = '1') else 
        tmp_7_fu_604_p4;
    select_ln340_8_fu_648_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_484_p2(0) = '1') else 
        tmp_9_fu_638_p4;
    select_ln340_fu_512_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_260_p2(0) = '1') else 
        tmp_1_fu_502_p4;
    select_ln388_1_fu_554_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_310_p2(0) = '1') else 
        tmp_3_fu_536_p4;
    select_ln388_2_fu_588_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_366_p2(0) = '1') else 
        tmp_5_fu_570_p4;
    select_ln388_3_fu_622_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_422_p2(0) = '1') else 
        tmp_7_fu_604_p4;
    select_ln388_4_fu_656_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_478_p2(0) = '1') else 
        tmp_9_fu_638_p4;
    select_ln388_fu_520_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_254_p2(0) = '1') else 
        tmp_1_fu_502_p4;
    select_ln65_1_fu_182_p1 <= data_3_V_read;
    select_ln65_1_fu_182_p2 <= data_2_V_read;
    select_ln65_1_fu_182_p3 <= 
        select_ln65_1_fu_182_p1 when (icmp_ln1496_1_fu_176_p2(0) = '1') else 
        select_ln65_1_fu_182_p2;
    select_ln65_2_fu_196_p3 <= 
        select_ln65_1_fu_182_p3 when (icmp_ln1496_2_fu_190_p2(0) = '1') else 
        select_ln65_fu_168_p3;
    select_ln65_fu_168_p1 <= data_1_V_read;
    select_ln65_fu_168_p2 <= data_0_V_read;
    select_ln65_fu_168_p3 <= 
        select_ln65_fu_168_p1 when (icmp_ln1496_fu_162_p2(0) = '1') else 
        select_ln65_fu_168_p2;
        sext_ln1116_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),30));

        sext_ln703_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_210_p3),17));

    sext_ln703_2_fu_278_p0 <= data_1_V_read;
        sext_ln703_2_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_278_p0),17));

    sext_ln703_3_fu_334_p0 <= data_2_V_read;
        sext_ln703_3_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_3_fu_334_p0),17));

    sext_ln703_4_fu_390_p0 <= data_3_V_read;
        sext_ln703_4_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_4_fu_390_p0),17));

    sext_ln703_5_fu_446_p0 <= data_4_V_read;
        sext_ln703_5_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_5_fu_446_p0),17));

    sext_ln703_fu_218_p0 <= data_0_V_read;
        sext_ln703_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_218_p0),17));

    sub_ln1193_1_fu_282_p2 <= std_logic_vector(signed(sext_ln703_2_fu_278_p1) - signed(sext_ln703_1_fu_222_p1));
    sub_ln1193_2_fu_338_p2 <= std_logic_vector(signed(sext_ln703_3_fu_334_p1) - signed(sext_ln703_1_fu_222_p1));
    sub_ln1193_3_fu_394_p2 <= std_logic_vector(signed(sext_ln703_4_fu_390_p1) - signed(sext_ln703_1_fu_222_p1));
    sub_ln1193_4_fu_450_p2 <= std_logic_vector(signed(sext_ln703_5_fu_446_p1) - signed(sext_ln703_1_fu_222_p1));
    sub_ln1193_fu_226_p2 <= std_logic_vector(signed(sext_ln703_fu_218_p1) - signed(sext_ln703_1_fu_222_p1));
    tmp_10_fu_352_p3 <= sub_ln1193_2_fu_338_p2(15 downto 15);
    tmp_11_fu_400_p3 <= sub_ln1193_3_fu_394_p2(16 downto 16);
    tmp_12_fu_408_p3 <= sub_ln1193_3_fu_394_p2(15 downto 15);
    tmp_13_fu_456_p3 <= sub_ln1193_4_fu_450_p2(16 downto 16);
    tmp_14_fu_464_p3 <= sub_ln1193_4_fu_450_p2(15 downto 15);
    tmp_1_fu_502_p4 <= sub_ln1193_fu_226_p2(15 downto 6);
    tmp_2_fu_240_p3 <= sub_ln1193_fu_226_p2(15 downto 15);
    tmp_3_fu_536_p4 <= sub_ln1193_1_fu_282_p2(15 downto 6);
    tmp_4_fu_288_p3 <= sub_ln1193_1_fu_282_p2(16 downto 16);
    tmp_5_fu_570_p4 <= sub_ln1193_2_fu_338_p2(15 downto 6);
    tmp_6_fu_296_p3 <= sub_ln1193_1_fu_282_p2(15 downto 15);
    tmp_7_fu_604_p4 <= sub_ln1193_3_fu_394_p2(15 downto 6);
    tmp_8_fu_344_p3 <= sub_ln1193_2_fu_338_p2(16 downto 16);
    tmp_9_fu_638_p4 <= sub_ln1193_4_fu_450_p2(15 downto 6);
    tmp_fu_232_p3 <= sub_ln1193_fu_226_p2(16 downto 16);
    x_max_V_fu_210_p1 <= data_4_V_read;
    x_max_V_fu_210_p3 <= 
        x_max_V_fu_210_p1 when (icmp_ln1496_3_fu_204_p2(0) = '1') else 
        select_ln65_2_fu_196_p3;
    xor_ln340_1_fu_322_p2 <= (tmp_4_fu_288_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_378_p2 <= (tmp_8_fu_344_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_434_p2 <= (tmp_11_fu_400_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_490_p2 <= (tmp_13_fu_456_p3 xor ap_const_lv1_1);
    xor_ln340_5_fu_260_p2 <= (tmp_fu_232_p3 xor tmp_2_fu_240_p3);
    xor_ln340_6_fu_316_p2 <= (tmp_6_fu_296_p3 xor tmp_4_fu_288_p3);
    xor_ln340_7_fu_372_p2 <= (tmp_8_fu_344_p3 xor tmp_10_fu_352_p3);
    xor_ln340_8_fu_428_p2 <= (tmp_12_fu_408_p3 xor tmp_11_fu_400_p3);
    xor_ln340_9_fu_484_p2 <= (tmp_14_fu_464_p3 xor tmp_13_fu_456_p3);
    xor_ln340_fu_266_p2 <= (tmp_fu_232_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_304_p2 <= (tmp_6_fu_296_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_360_p2 <= (tmp_10_fu_352_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_416_p2 <= (tmp_12_fu_408_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_472_p2 <= (tmp_14_fu_464_p3 xor ap_const_lv1_1);
    xor_ln786_fu_248_p2 <= (tmp_2_fu_240_p3 xor ap_const_lv1_1);
    y_V_1_fu_562_p3 <= 
        select_ln340_2_fu_546_p3 when (or_ln340_1_fu_328_p2(0) = '1') else 
        select_ln388_1_fu_554_p3;
    y_V_2_fu_596_p3 <= 
        select_ln340_4_fu_580_p3 when (or_ln340_2_fu_384_p2(0) = '1') else 
        select_ln388_2_fu_588_p3;
    y_V_3_fu_630_p3 <= 
        select_ln340_6_fu_614_p3 when (or_ln340_3_fu_440_p2(0) = '1') else 
        select_ln388_3_fu_622_p3;
    y_V_4_fu_664_p3 <= 
        select_ln340_8_fu_648_p3 when (or_ln340_4_fu_496_p2(0) = '1') else 
        select_ln388_4_fu_656_p3;
    y_V_5_fu_716_p4 <= exp_sum_V_fu_710_p2(17 downto 8);
    y_V_fu_528_p3 <= 
        select_ln340_fu_512_p3 when (or_ln340_fu_272_p2(0) = '1') else 
        select_ln388_fu_520_p3;
    zext_ln255_1_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_865),64));
    zext_ln255_2_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_870),64));
    zext_ln255_3_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_875),64));
    zext_ln255_4_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_880),64));
    zext_ln255_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_860),64));
    zext_ln265_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_716_p4),64));
end behav;

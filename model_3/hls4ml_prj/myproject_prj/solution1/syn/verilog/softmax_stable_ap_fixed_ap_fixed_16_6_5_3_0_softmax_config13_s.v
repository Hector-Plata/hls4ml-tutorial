// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [17:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [17:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [17:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [17:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [17:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire   [9:0] y_V_fu_528_p3;
reg   [9:0] y_V_reg_860;
wire   [9:0] y_V_1_fu_562_p3;
reg   [9:0] y_V_1_reg_865;
wire   [9:0] y_V_2_fu_596_p3;
reg   [9:0] y_V_2_reg_870;
wire   [9:0] y_V_3_fu_630_p3;
reg   [9:0] y_V_3_reg_875;
wire   [9:0] y_V_4_fu_664_p3;
reg   [9:0] y_V_4_reg_880;
reg  signed [17:0] exp_res_0_V_reg_910;
reg  signed [17:0] exp_res_1_V_reg_915;
reg  signed [17:0] exp_res_2_V_reg_920;
reg  signed [17:0] exp_res_3_V_reg_925;
reg  signed [17:0] exp_res_4_V_reg_930;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_672_p1;
wire   [63:0] zext_ln255_1_fu_676_p1;
wire   [63:0] zext_ln255_2_fu_680_p1;
wire   [63:0] zext_ln255_3_fu_684_p1;
wire   [63:0] zext_ln255_4_fu_688_p1;
wire   [63:0] zext_ln265_fu_726_p1;
wire  signed [15:0] icmp_ln1496_fu_162_p0;
wire  signed [15:0] icmp_ln1496_fu_162_p1;
wire   [0:0] icmp_ln1496_fu_162_p2;
wire  signed [15:0] select_ln65_fu_168_p1;
wire  signed [15:0] select_ln65_fu_168_p2;
wire  signed [15:0] icmp_ln1496_1_fu_176_p0;
wire  signed [15:0] icmp_ln1496_1_fu_176_p1;
wire   [0:0] icmp_ln1496_1_fu_176_p2;
wire  signed [15:0] select_ln65_1_fu_182_p1;
wire  signed [15:0] select_ln65_1_fu_182_p2;
wire   [15:0] select_ln65_fu_168_p3;
wire   [15:0] select_ln65_1_fu_182_p3;
wire   [0:0] icmp_ln1496_2_fu_190_p2;
wire   [15:0] select_ln65_2_fu_196_p3;
wire  signed [15:0] icmp_ln1496_3_fu_204_p1;
wire   [0:0] icmp_ln1496_3_fu_204_p2;
wire  signed [15:0] x_max_V_fu_210_p1;
wire  signed [15:0] sext_ln703_fu_218_p0;
wire   [15:0] x_max_V_fu_210_p3;
wire  signed [16:0] sext_ln703_fu_218_p1;
wire  signed [16:0] sext_ln703_1_fu_222_p1;
wire   [16:0] sub_ln1193_fu_226_p2;
wire   [0:0] tmp_2_fu_240_p3;
wire   [0:0] tmp_fu_232_p3;
wire   [0:0] xor_ln786_fu_248_p2;
wire   [0:0] xor_ln340_fu_266_p2;
wire  signed [15:0] sext_ln703_2_fu_278_p0;
wire  signed [16:0] sext_ln703_2_fu_278_p1;
wire   [16:0] sub_ln1193_1_fu_282_p2;
wire   [0:0] tmp_6_fu_296_p3;
wire   [0:0] tmp_4_fu_288_p3;
wire   [0:0] xor_ln786_1_fu_304_p2;
wire   [0:0] xor_ln340_1_fu_322_p2;
wire  signed [15:0] sext_ln703_3_fu_334_p0;
wire  signed [16:0] sext_ln703_3_fu_334_p1;
wire   [16:0] sub_ln1193_2_fu_338_p2;
wire   [0:0] tmp_10_fu_352_p3;
wire   [0:0] tmp_8_fu_344_p3;
wire   [0:0] xor_ln786_2_fu_360_p2;
wire   [0:0] xor_ln340_2_fu_378_p2;
wire  signed [15:0] sext_ln703_4_fu_390_p0;
wire  signed [16:0] sext_ln703_4_fu_390_p1;
wire   [16:0] sub_ln1193_3_fu_394_p2;
wire   [0:0] tmp_12_fu_408_p3;
wire   [0:0] tmp_11_fu_400_p3;
wire   [0:0] xor_ln786_3_fu_416_p2;
wire   [0:0] xor_ln340_3_fu_434_p2;
wire  signed [15:0] sext_ln703_5_fu_446_p0;
wire  signed [16:0] sext_ln703_5_fu_446_p1;
wire   [16:0] sub_ln1193_4_fu_450_p2;
wire   [0:0] tmp_14_fu_464_p3;
wire   [0:0] tmp_13_fu_456_p3;
wire   [0:0] xor_ln786_4_fu_472_p2;
wire   [0:0] xor_ln340_4_fu_490_p2;
wire   [0:0] xor_ln340_5_fu_260_p2;
wire   [9:0] tmp_1_fu_502_p4;
wire   [0:0] and_ln786_fu_254_p2;
wire   [0:0] or_ln340_fu_272_p2;
wire   [9:0] select_ln340_fu_512_p3;
wire   [9:0] select_ln388_fu_520_p3;
wire   [0:0] xor_ln340_6_fu_316_p2;
wire   [9:0] tmp_3_fu_536_p4;
wire   [0:0] and_ln786_1_fu_310_p2;
wire   [0:0] or_ln340_1_fu_328_p2;
wire   [9:0] select_ln340_2_fu_546_p3;
wire   [9:0] select_ln388_1_fu_554_p3;
wire   [0:0] xor_ln340_7_fu_372_p2;
wire   [9:0] tmp_5_fu_570_p4;
wire   [0:0] and_ln786_2_fu_366_p2;
wire   [0:0] or_ln340_2_fu_384_p2;
wire   [9:0] select_ln340_4_fu_580_p3;
wire   [9:0] select_ln388_2_fu_588_p3;
wire   [0:0] xor_ln340_8_fu_428_p2;
wire   [9:0] tmp_7_fu_604_p4;
wire   [0:0] and_ln786_3_fu_422_p2;
wire   [0:0] or_ln340_3_fu_440_p2;
wire   [9:0] select_ln340_6_fu_614_p3;
wire   [9:0] select_ln388_3_fu_622_p3;
wire   [0:0] xor_ln340_9_fu_484_p2;
wire   [9:0] tmp_9_fu_638_p4;
wire   [0:0] and_ln786_4_fu_478_p2;
wire   [0:0] or_ln340_4_fu_496_p2;
wire   [9:0] select_ln340_8_fu_648_p3;
wire   [9:0] select_ln388_4_fu_656_p3;
wire  signed [17:0] add_ln703_fu_692_p0;
wire  signed [17:0] add_ln703_fu_692_p1;
wire  signed [17:0] add_ln703_1_fu_698_p0;
wire  signed [17:0] add_ln703_1_fu_698_p1;
wire  signed [17:0] add_ln703_2_fu_704_p0;
wire   [17:0] add_ln703_1_fu_698_p2;
wire   [17:0] add_ln703_fu_692_p2;
wire   [17:0] add_ln703_2_fu_704_p2;
wire   [17:0] exp_sum_V_fu_710_p2;
wire   [9:0] y_V_5_fu_716_p4;
wire  signed [29:0] mul_ln1118_fu_825_p2;
wire  signed [29:0] mul_ln1118_1_fu_832_p2;
wire  signed [29:0] mul_ln1118_2_fu_839_p2;
wire  signed [29:0] mul_ln1118_3_fu_846_p2;
wire  signed [29:0] mul_ln1118_4_fu_853_p2;
wire  signed [17:0] mul_ln1118_fu_825_p1;
wire  signed [29:0] sext_ln1116_fu_731_p1;
wire  signed [17:0] mul_ln1118_1_fu_832_p1;
wire  signed [17:0] mul_ln1118_2_fu_839_p1;
wire  signed [17:0] mul_ln1118_3_fu_846_p1;
wire  signed [17:0] mul_ln1118_4_fu_853_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table1 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_1_1_U234(
    .din0(exp_res_0_V_reg_910),
    .din1(mul_ln1118_fu_825_p1),
    .dout(mul_ln1118_fu_825_p2)
);

myproject_mul_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_1_1_U235(
    .din0(exp_res_1_V_reg_915),
    .din1(mul_ln1118_1_fu_832_p1),
    .dout(mul_ln1118_1_fu_832_p2)
);

myproject_mul_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_1_1_U236(
    .din0(exp_res_2_V_reg_920),
    .din1(mul_ln1118_2_fu_839_p1),
    .dout(mul_ln1118_2_fu_839_p2)
);

myproject_mul_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_1_1_U237(
    .din0(exp_res_3_V_reg_925),
    .din1(mul_ln1118_3_fu_846_p1),
    .dout(mul_ln1118_3_fu_846_p2)
);

myproject_mul_mul_18s_18s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_18s_18s_30_1_1_U238(
    .din0(exp_res_4_V_reg_930),
    .din1(mul_ln1118_4_fu_853_p1),
    .dout(mul_ln1118_4_fu_853_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_910 <= exp_table1_q0;
        exp_res_1_V_reg_915 <= exp_table1_q1;
        exp_res_2_V_reg_920 <= exp_table1_q2;
        exp_res_3_V_reg_925 <= exp_table1_q3;
        exp_res_4_V_reg_930 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_V_1_reg_865 <= y_V_1_fu_562_p3;
        y_V_2_reg_870 <= y_V_2_fu_596_p3;
        y_V_3_reg_875 <= y_V_3_fu_630_p3;
        y_V_4_reg_880 <= y_V_4_fu_664_p3;
        y_V_reg_860 <= y_V_fu_528_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_698_p0 = exp_table1_q4;

assign add_ln703_1_fu_698_p1 = exp_table1_q2;

assign add_ln703_1_fu_698_p2 = ($signed(add_ln703_1_fu_698_p0) + $signed(add_ln703_1_fu_698_p1));

assign add_ln703_2_fu_704_p0 = exp_table1_q3;

assign add_ln703_2_fu_704_p2 = ($signed(add_ln703_2_fu_704_p0) + $signed(add_ln703_1_fu_698_p2));

assign add_ln703_fu_692_p0 = exp_table1_q1;

assign add_ln703_fu_692_p1 = exp_table1_q0;

assign add_ln703_fu_692_p2 = ($signed(add_ln703_fu_692_p0) + $signed(add_ln703_fu_692_p1));

assign and_ln786_1_fu_310_p2 = (xor_ln786_1_fu_304_p2 & tmp_4_fu_288_p3);

assign and_ln786_2_fu_366_p2 = (xor_ln786_2_fu_360_p2 & tmp_8_fu_344_p3);

assign and_ln786_3_fu_422_p2 = (xor_ln786_3_fu_416_p2 & tmp_11_fu_400_p3);

assign and_ln786_4_fu_478_p2 = (xor_ln786_4_fu_472_p2 & tmp_13_fu_456_p3);

assign and_ln786_fu_254_p2 = (xor_ln786_fu_248_p2 & tmp_fu_232_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1118_fu_825_p2[29:14]}};

assign ap_return_1 = {{mul_ln1118_1_fu_832_p2[29:14]}};

assign ap_return_2 = {{mul_ln1118_2_fu_839_p2[29:14]}};

assign ap_return_3 = {{mul_ln1118_3_fu_846_p2[29:14]}};

assign ap_return_4 = {{mul_ln1118_4_fu_853_p2[29:14]}};

assign exp_sum_V_fu_710_p2 = (add_ln703_fu_692_p2 + add_ln703_2_fu_704_p2);

assign exp_table1_address0 = zext_ln255_fu_672_p1;

assign exp_table1_address1 = zext_ln255_1_fu_676_p1;

assign exp_table1_address2 = zext_ln255_2_fu_680_p1;

assign exp_table1_address3 = zext_ln255_3_fu_684_p1;

assign exp_table1_address4 = zext_ln255_4_fu_688_p1;

assign icmp_ln1496_1_fu_176_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_176_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_176_p2 = (($signed(icmp_ln1496_1_fu_176_p0) < $signed(icmp_ln1496_1_fu_176_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_190_p2 = (($signed(select_ln65_fu_168_p3) < $signed(select_ln65_1_fu_182_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_204_p1 = data_4_V_read;

assign icmp_ln1496_3_fu_204_p2 = (($signed(select_ln65_2_fu_196_p3) < $signed(icmp_ln1496_3_fu_204_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_162_p0 = data_0_V_read;

assign icmp_ln1496_fu_162_p1 = data_1_V_read;

assign icmp_ln1496_fu_162_p2 = (($signed(icmp_ln1496_fu_162_p0) < $signed(icmp_ln1496_fu_162_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_726_p1;

assign mul_ln1118_1_fu_832_p1 = sext_ln1116_fu_731_p1;

assign mul_ln1118_2_fu_839_p1 = sext_ln1116_fu_731_p1;

assign mul_ln1118_3_fu_846_p1 = sext_ln1116_fu_731_p1;

assign mul_ln1118_4_fu_853_p1 = sext_ln1116_fu_731_p1;

assign mul_ln1118_fu_825_p1 = sext_ln1116_fu_731_p1;

assign or_ln340_1_fu_328_p2 = (xor_ln340_1_fu_322_p2 | tmp_6_fu_296_p3);

assign or_ln340_2_fu_384_p2 = (xor_ln340_2_fu_378_p2 | tmp_10_fu_352_p3);

assign or_ln340_3_fu_440_p2 = (xor_ln340_3_fu_434_p2 | tmp_12_fu_408_p3);

assign or_ln340_4_fu_496_p2 = (xor_ln340_4_fu_490_p2 | tmp_14_fu_464_p3);

assign or_ln340_fu_272_p2 = (xor_ln340_fu_266_p2 | tmp_2_fu_240_p3);

assign select_ln340_2_fu_546_p3 = ((xor_ln340_6_fu_316_p2[0:0] === 1'b1) ? 10'd511 : tmp_3_fu_536_p4);

assign select_ln340_4_fu_580_p3 = ((xor_ln340_7_fu_372_p2[0:0] === 1'b1) ? 10'd511 : tmp_5_fu_570_p4);

assign select_ln340_6_fu_614_p3 = ((xor_ln340_8_fu_428_p2[0:0] === 1'b1) ? 10'd511 : tmp_7_fu_604_p4);

assign select_ln340_8_fu_648_p3 = ((xor_ln340_9_fu_484_p2[0:0] === 1'b1) ? 10'd511 : tmp_9_fu_638_p4);

assign select_ln340_fu_512_p3 = ((xor_ln340_5_fu_260_p2[0:0] === 1'b1) ? 10'd511 : tmp_1_fu_502_p4);

assign select_ln388_1_fu_554_p3 = ((and_ln786_1_fu_310_p2[0:0] === 1'b1) ? 10'd512 : tmp_3_fu_536_p4);

assign select_ln388_2_fu_588_p3 = ((and_ln786_2_fu_366_p2[0:0] === 1'b1) ? 10'd512 : tmp_5_fu_570_p4);

assign select_ln388_3_fu_622_p3 = ((and_ln786_3_fu_422_p2[0:0] === 1'b1) ? 10'd512 : tmp_7_fu_604_p4);

assign select_ln388_4_fu_656_p3 = ((and_ln786_4_fu_478_p2[0:0] === 1'b1) ? 10'd512 : tmp_9_fu_638_p4);

assign select_ln388_fu_520_p3 = ((and_ln786_fu_254_p2[0:0] === 1'b1) ? 10'd512 : tmp_1_fu_502_p4);

assign select_ln65_1_fu_182_p1 = data_3_V_read;

assign select_ln65_1_fu_182_p2 = data_2_V_read;

assign select_ln65_1_fu_182_p3 = ((icmp_ln1496_1_fu_176_p2[0:0] === 1'b1) ? select_ln65_1_fu_182_p1 : select_ln65_1_fu_182_p2);

assign select_ln65_2_fu_196_p3 = ((icmp_ln1496_2_fu_190_p2[0:0] === 1'b1) ? select_ln65_1_fu_182_p3 : select_ln65_fu_168_p3);

assign select_ln65_fu_168_p1 = data_1_V_read;

assign select_ln65_fu_168_p2 = data_0_V_read;

assign select_ln65_fu_168_p3 = ((icmp_ln1496_fu_162_p2[0:0] === 1'b1) ? select_ln65_fu_168_p1 : select_ln65_fu_168_p2);

assign sext_ln1116_fu_731_p1 = $signed(invert_table2_q0);

assign sext_ln703_1_fu_222_p1 = $signed(x_max_V_fu_210_p3);

assign sext_ln703_2_fu_278_p0 = data_1_V_read;

assign sext_ln703_2_fu_278_p1 = sext_ln703_2_fu_278_p0;

assign sext_ln703_3_fu_334_p0 = data_2_V_read;

assign sext_ln703_3_fu_334_p1 = sext_ln703_3_fu_334_p0;

assign sext_ln703_4_fu_390_p0 = data_3_V_read;

assign sext_ln703_4_fu_390_p1 = sext_ln703_4_fu_390_p0;

assign sext_ln703_5_fu_446_p0 = data_4_V_read;

assign sext_ln703_5_fu_446_p1 = sext_ln703_5_fu_446_p0;

assign sext_ln703_fu_218_p0 = data_0_V_read;

assign sext_ln703_fu_218_p1 = sext_ln703_fu_218_p0;

assign sub_ln1193_1_fu_282_p2 = ($signed(sext_ln703_2_fu_278_p1) - $signed(sext_ln703_1_fu_222_p1));

assign sub_ln1193_2_fu_338_p2 = ($signed(sext_ln703_3_fu_334_p1) - $signed(sext_ln703_1_fu_222_p1));

assign sub_ln1193_3_fu_394_p2 = ($signed(sext_ln703_4_fu_390_p1) - $signed(sext_ln703_1_fu_222_p1));

assign sub_ln1193_4_fu_450_p2 = ($signed(sext_ln703_5_fu_446_p1) - $signed(sext_ln703_1_fu_222_p1));

assign sub_ln1193_fu_226_p2 = ($signed(sext_ln703_fu_218_p1) - $signed(sext_ln703_1_fu_222_p1));

assign tmp_10_fu_352_p3 = sub_ln1193_2_fu_338_p2[32'd15];

assign tmp_11_fu_400_p3 = sub_ln1193_3_fu_394_p2[32'd16];

assign tmp_12_fu_408_p3 = sub_ln1193_3_fu_394_p2[32'd15];

assign tmp_13_fu_456_p3 = sub_ln1193_4_fu_450_p2[32'd16];

assign tmp_14_fu_464_p3 = sub_ln1193_4_fu_450_p2[32'd15];

assign tmp_1_fu_502_p4 = {{sub_ln1193_fu_226_p2[15:6]}};

assign tmp_2_fu_240_p3 = sub_ln1193_fu_226_p2[32'd15];

assign tmp_3_fu_536_p4 = {{sub_ln1193_1_fu_282_p2[15:6]}};

assign tmp_4_fu_288_p3 = sub_ln1193_1_fu_282_p2[32'd16];

assign tmp_5_fu_570_p4 = {{sub_ln1193_2_fu_338_p2[15:6]}};

assign tmp_6_fu_296_p3 = sub_ln1193_1_fu_282_p2[32'd15];

assign tmp_7_fu_604_p4 = {{sub_ln1193_3_fu_394_p2[15:6]}};

assign tmp_8_fu_344_p3 = sub_ln1193_2_fu_338_p2[32'd16];

assign tmp_9_fu_638_p4 = {{sub_ln1193_4_fu_450_p2[15:6]}};

assign tmp_fu_232_p3 = sub_ln1193_fu_226_p2[32'd16];

assign x_max_V_fu_210_p1 = data_4_V_read;

assign x_max_V_fu_210_p3 = ((icmp_ln1496_3_fu_204_p2[0:0] === 1'b1) ? x_max_V_fu_210_p1 : select_ln65_2_fu_196_p3);

assign xor_ln340_1_fu_322_p2 = (tmp_4_fu_288_p3 ^ 1'd1);

assign xor_ln340_2_fu_378_p2 = (tmp_8_fu_344_p3 ^ 1'd1);

assign xor_ln340_3_fu_434_p2 = (tmp_11_fu_400_p3 ^ 1'd1);

assign xor_ln340_4_fu_490_p2 = (tmp_13_fu_456_p3 ^ 1'd1);

assign xor_ln340_5_fu_260_p2 = (tmp_fu_232_p3 ^ tmp_2_fu_240_p3);

assign xor_ln340_6_fu_316_p2 = (tmp_6_fu_296_p3 ^ tmp_4_fu_288_p3);

assign xor_ln340_7_fu_372_p2 = (tmp_8_fu_344_p3 ^ tmp_10_fu_352_p3);

assign xor_ln340_8_fu_428_p2 = (tmp_12_fu_408_p3 ^ tmp_11_fu_400_p3);

assign xor_ln340_9_fu_484_p2 = (tmp_14_fu_464_p3 ^ tmp_13_fu_456_p3);

assign xor_ln340_fu_266_p2 = (tmp_fu_232_p3 ^ 1'd1);

assign xor_ln786_1_fu_304_p2 = (tmp_6_fu_296_p3 ^ 1'd1);

assign xor_ln786_2_fu_360_p2 = (tmp_10_fu_352_p3 ^ 1'd1);

assign xor_ln786_3_fu_416_p2 = (tmp_12_fu_408_p3 ^ 1'd1);

assign xor_ln786_4_fu_472_p2 = (tmp_14_fu_464_p3 ^ 1'd1);

assign xor_ln786_fu_248_p2 = (tmp_2_fu_240_p3 ^ 1'd1);

assign y_V_1_fu_562_p3 = ((or_ln340_1_fu_328_p2[0:0] === 1'b1) ? select_ln340_2_fu_546_p3 : select_ln388_1_fu_554_p3);

assign y_V_2_fu_596_p3 = ((or_ln340_2_fu_384_p2[0:0] === 1'b1) ? select_ln340_4_fu_580_p3 : select_ln388_2_fu_588_p3);

assign y_V_3_fu_630_p3 = ((or_ln340_3_fu_440_p2[0:0] === 1'b1) ? select_ln340_6_fu_614_p3 : select_ln388_3_fu_622_p3);

assign y_V_4_fu_664_p3 = ((or_ln340_4_fu_496_p2[0:0] === 1'b1) ? select_ln340_8_fu_648_p3 : select_ln388_4_fu_656_p3);

assign y_V_5_fu_716_p4 = {{exp_sum_V_fu_710_p2[17:8]}};

assign y_V_fu_528_p3 = ((or_ln340_fu_272_p2[0:0] === 1'b1) ? select_ln340_fu_512_p3 : select_ln388_fu_520_p3);

assign zext_ln255_1_fu_676_p1 = y_V_1_reg_865;

assign zext_ln255_2_fu_680_p1 = y_V_2_reg_870;

assign zext_ln255_3_fu_684_p1 = y_V_3_reg_875;

assign zext_ln255_4_fu_688_p1 = y_V_4_reg_880;

assign zext_ln255_fu_672_p1 = y_V_reg_860;

assign zext_ln265_fu_726_p1 = y_V_5_fu_716_p4;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s
